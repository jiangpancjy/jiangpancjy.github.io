{"pages":[],"posts":[{"title":"【入门】Markdown","text":"总览几乎所有 Markdown 应用程序都支持 John Gruber 原始设计文档中列出的 Markdown 基本语法。但是，Markdown 处理程序之间存在着细微的变化和差异，我们都会尽可能标记出来。 1. 标题（Headings）要创建标题，请在单词或短语前面添加井号 (#) 。井号的数量代表了标题的级别。例如，添加三个井号即创建一个三级标题 (&lt;h3&gt;) (例如：### My Header)。 可选语法还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 – 号来标识二级标题。 标题（Heading）用法的最佳实践Markdown 应用程序在处理标题和周围段落之间紧挨着的情况时并不一致。为了兼容考虑，请用一个或多个空白行对段落和标题进行分隔。 2. 段落（Paragraphs）要创建段落，请使用空白行将一行或多行文本进行分隔。 段落（Paragraph）用法的最佳实践不要用空格（spaces）或制表符（ tabs）缩进段落。 3. 换行（Line Breaks）在一行的末尾添加两个或多个空格，然后按回车键（return），即可创建一个换行（line break） (&lt;br&gt;)。 换行（Line Break）用法的最佳实践几乎每个 Markdown 应用程序都支持两个或多个空格进行换行 (称为 “结尾空格（trailing whitespace）”) 的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 &lt;br&gt; 标签。 为了兼容性，请在行尾添加“结尾空格”或 HTML 的 &lt;br&gt; 标签来实现换行。 还有两种其他方式我并不推荐使用。CommonMark 和其它几种轻量级标记语言支持在行尾添加反斜杠 (\\) 的方式实现换行，但是并非所有 Markdown 应用程序都支持此种方式，因此从兼容性的角度来看，不推荐使用。并且至少有两种轻量级标记语言支持无须在行尾添加任何内容，只须键入回车键（ return）即可实现换行。 4. 强调（Emphasis）通过将文本设置为粗体或斜体来强调其重要性。 粗体（Bold）要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。 粗体（Bold）用法最佳实践Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（asterisks）。 斜体（Italic）要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。 斜体（Italic）用法的最佳实践Markdown 的众多应用程序在如何处理单词中间的下划线上意见不一致。为了兼容起见，请用星号标注单词中间的斜体来表示着重。 粗体（Bold）和斜体（Italic）要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。 粗体（Bold）和斜体（Italic）用法的最佳实践Markdown 应用程序在处理单词或短语中间添加的下划线上并不一致。为了实现兼容性，请使用星号将单词或短语的中间部分加粗并以斜体显示，以示重要。 5. 块引用（Blockquotes）要创建块引用，请在段落前添加一个 &gt; 符号。 &gt; 这是一段块引用 渲染结果如下： 这是一段块引用 多个段落的块引用（Blockquotes）块引用可以包含多个段落。为段落之间的空白行各添加一个 &gt; 符号。 &gt; 第一段块引用&gt;&gt; 第二段块引用 渲染结果如下： 第一段块引用 第二段块引用 嵌套块引用（Nested Blockquotes）块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。 &gt; 这是一段块引用&gt;&gt;&gt; 这是一段嵌套块引用 渲染结果如下： 这是一段块引用 这是一段嵌套块引用 带有其它元素的块引用（Blockquotes with Other Elements）块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。 &gt; #### 这是标题&gt;&gt; - 无序列表&gt;&gt; **粗体** 渲染结果如下： 这是标题 无序列表 粗体 6. 列表（Lists）你可以将多个条目组织成有序或无序列表。 有序列表（Ordered Lists）要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。 无序列表（Unordered Lists）要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。 在列表中添加列表项要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符，如下例所示： 段落（Paragraphs） 渲染结果如下： This is the first list item. Here’s the second list item. I need to add another paragraph below the second list item. And here’s the third list item. 引用块（Blockquotes）","link":"/2020/11/02/%E5%85%A5%E9%97%A8-Markdown/"},{"title":"【入门】Python-02-变量与简单数据类型","text":"变量在上一个教程中，我们实现了我们的第一个 Python 程序。下面我们尝试在 hello_world.py 中使用一个变量，如下所示： 12message = &quot;Hello world!&quot;print(message) 输出如下： 1Hello world! 可以看到这个输出和之前一样，但是代码却不同，不同之处在于我们赋值了一个变量并且使用了它。下面，我来解释一下什么**变量(variable)**： 首先介绍变量名的概念， 变量名就像一个名字或者昵称，就像每个人都有一个名字和若干个外号。既然有了名字，那我们肯定要有作为名字载体的人吧。 对象(object) 就是 Python 中变量的载体。在 Python 中，有这样一句话，叫做“一切皆对象”。意思是 Python 中你看到的几乎所有代码，它的背后其实都是一个个对象。就像上面的 &quot;Hello world!&quot; 这是一个字符串对象，它的变量名叫做 message。 所以，变量其实就是变量名和对象的结合，我们看到的其实只是一个变量名，其背后是一个对象，或者说叫做这个变量的值。 接下来，我们来看看，Python 解释器 是怎么执行这段代码的： 首先 Python 解释器 读到第一行，将变量名 message 和字符串 &quot;Hello world!&quot; 结合起来，可以理解为字符串 &quot;Hello world!&quot; 取了一个叫 message 的名字。 读到第二行的时候，将变量 message 的值打印出来。 变量的命名在 Python 中，对变量的命名需要遵循一些规则： 变量名只能包含字母、数字和下划线。变量名可以以字母和下划线打头，但不能以数字打头。例如：变量名 message_1 是正确的，但是 1_message 是错误的。 变量名不能用空格，但是可以用下划线来分隔其中的单词。 不要将 Python 关键字和函数作为变量名，即不要使用 Python 保留用于特殊通途的单词。 变量名应该既简短又具有描述性。例如：name 比 n 好，student_name 比 s_n 好，name_length 比 length_of_person_name 好。 慎用小写字符 l 和大写字母 O，因为它们可能被人看错成数字 1 和 0。","link":"/2020/10/04/%E5%85%A5%E9%97%A8-Python-02-%E5%8F%98%E9%87%8F%E4%B8%8E%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"【入门】Python-01-起步","text":"开发环境首先我们要编辑代码，需要有一个代码编辑器，就好像我们要编辑 .doc 后缀的文档，需要 Word 或者 WPS。如果要编辑代码，只需要一个文本文档就可以满足需求。但是我们的代码除了要编辑，还需要运行。 因此除了代码编辑器，我们还需要一个东西来运行我们的代码，这个东西叫做解释器(Interpreter)。举一个不太恰当的例子，你可以把解释器想成是一个工具人，而你的代码就是一份任务清单，解释器会去重头到尾一行一行地读你的代码，你的代码就行是一个一个的任务，解释器读到一个任务，就会去执行它。 除此之外，为了方便我们调试代码，我们还需要一个可视化图形界面。因此为了满足我们开发的需求，我们需要以上三样东西。但是如果我们分别去下载三样东西，然后去使用的话，会非常麻烦。因此为了方便开发，我们会只用集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。 下面我推荐两款我觉得最好用的 IDE，如果是做数据分析，推荐 Anaconda + Spyder；如果是做 Web 开发，推荐 Anaconda + PyCharm。 环境安装未完成。 初识 Pythonhello_world.py: 1print(&quot;Hello world!&quot;) 当运行上面的代码的时候，我们会看到如下输出： 1Hello world! 其中 hello_world.py 文件中的 .py 表明这是一个 Python 程序，因此当运行代码时将使用 Python 解释器 来运行它。Python 解释器 会读取整个程序，确定其中每个单词的含义。 例如：看到单词 print 时，解释器就会将括号中的内容打印到屏幕，而不会管括号中的内容是什么。 编写程序时，编辑器会以不同的颜色突出代码的不同部分，这个功能叫做 语法高亮。 例如：在上图中，print 用紫色显示，表明这是一个函数；&quot;Hello world!&quot; 用绿色显示，表明这是一个字符串。","link":"/2020/10/04/%E5%85%A5%E9%97%A8-Python-01-%E8%B5%B7%E6%AD%A5/"}],"tags":[{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"},{"name":"Python 基础","slug":"Python-基础","link":"/categories/Python-%E5%9F%BA%E7%A1%80/"}]}